[General]
network = Network


output-vector-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.vec
output-scalar-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.sca

sim-time-limit = 100s
repeat = 1
seed-set = ${repetition}

#**.numControllers = 1
#
#**.numClients = 1


**.rtt.result-recording-modes = +vector,-stats
**.queueSize.result-recording-modes = +vector,+stats
**.bufferSize.result-recording-modes = +vector,+stats
**.waitingTime.result-recording-modes = +vector,+stats

**.packets.result-recording-modes = +count
**.packetBytes.result-recording-modes = +sum
**.packets*.scalar-recording = true
**.packetBytes*.scalar-recording = true
**.droppedDataRate.result-recording-modes = default,all

**.numPacketIn*.scalar-recording = true

**.bufferSize*.vector-recording = true
**.queueSize*.vector-recording = true
**.waitingTime*.vector-recording = true

**.flowTable**.scalar-recording = true

**.pingApp[*].rtt*.vector-recording = true


**.controllerApps[*].*.scalar-recording = true
**.pingApp[*].numLost*.scalar-recording = true
**.pingApp[*].numOutOfOrderArrivals*.scalar-recording = true

**.vector-recording = false
**.scalar-recording = false


**.spanningTree.startNode = 4
**.highlightActivePorts = true

# random ping application
**.client*.numApps = 1
**.server*.numApps = 1

#**.client*.app[*].typename = "PingAppRandom"
#**.client*.app[*].sendInterval = 2s
#**.client*.app[*].startTime = uniform(100s,120s)
#**.client*.app[*].destAddr = "open_flow_controller1"


#**.client*.numApps = 1
#**.client*.app[0].typename = "PingAppRandom"
#**.client*.app[0].sendInterval = 2s
#**.client*.app[0].startTime = uniform(100s,1800s)
#**.client*.app[*].destAddr = "open_flow_controller1"
#**.client*.app[0].typename = "TcpSessionApp"
#**.client*.app[0].active = true
#**.client*.app[0].localPort = -1
#**.client*.app[0].connectAddress = "server1"
#**.client*.app[0].connectPort = 1000
#**.client*.app[0].tOpen = 1.0s
#**.client*.app[0].tSend = 1.0s
#**.client*.app[0].sendBytes = 200000000B
#**.client*.app[0].sendScript = ""
#**.client*.app[0].tClose = 100s
##**.client*.app[*].
##**.client*.tcp.typename = "Tcp"
##**.tcp.tcpAlgorithmClass = "TcpNoCongestionControl"
##**.client1.tcpType = "TcpSpoof"
##**.client1.tcp.
#
#
#
#**.server*.app[*].typename = "TcpEchoApp"
#**.server*.app[0].localPort = 1000
#**.server*.app[0].echoFactor = 1.0
#**.server*.app[0].echoDelay = 0s

**.client*.app[0].typename = "UdpApp"
**.client*.app[0].io.localPort = 1000
**.client*.app[0].io.destAddress = "server1"
**.client*.app[0].io.destPort = 1000
**.client*.app[0].source.productionInterval = 1s
**.client*.app[0].source.packetLength = intuniform(10000B, 20000B)
**.client*.app[0].source.packetData = intuniform(0, 1)

[Config BurstyTraffic]
**.server*.app[0].typename = "UdpApp"
**.server*.app[0].io.localPort = 1000
**.server*.app[0].io.destAddress = "client1"
**.server*.app[0].io.destPort = 1000
**.server*.app[0].source.typename = "BurstyPacketProducer"
**.server*.app[0].source.normalProducer.productionInterval = 1s
**.server*.app[0].source.normalProducer.packetLength = 10000B
**.server*.app[0].source.burstProducer.productionInterval = 0.1s
**.server*.app[0].source.burstProducer.packetLength = 1000B
**.server*.app[0].source.scheduler.waitIntervals = "40 4"
**.server*.app[0].source.scheduler.transitionProbabilities = "0 1 1 0"
#openflow params
**.open_flow_switch*.OF_Switch.connectAddress = "open_flow_controller1"
**.open_flow_switch*.OF_Switch.connectAt = uniform(0s,1s)
**.open_flow_switch*.etherMAC[*].mac.promiscuous = true

# 404bytes see imix and buffer size of 1.5mb see hp switch 1500000/404
**.OF_Switch.bufferCapacity = 100



**.OF_Switch.serviceTime = 0.000035s * (${switchServiceTimeFactor= 1,130,140,150,152,154,156,158,160,170,180,190,200})


#1800 00 requests per second on 8xcores 8xthreads and 32 switches (hotice2012-final)
**.open_flow_controller*.serviceTime = 0.000005556s *(${controllerServiceTimeFactor= 1,130,140,150,152,154,156,158,160,170,180,190,200 !switchServiceTimeFactor})


**.open_flow_controller*.numControllerApps = 3
**.open_flow_controller*.controllerApps[0].typename = "LLDPForwarding"
#refer to beacon leraning switch code
**.open_flow_controller*.controllerApps[0].flowModIdleTimeOut = 5
**.open_flow_controller*.controllerApps[0].ignoreArpRequests = true

**.open_flow_controller*.controllerApps[1].typename = "LLDPAgent"
**.open_flow_controller*.controllerApps[1].flowModIdleTimeOut = 140

**.open_flow_controller*.controllerApps[2].typename = "ARPResponder"


# NIC configuration
**.ppp[*].queue.packetCapacity = 10  # in routers
**.open_flow_switch*.tcp.mss = 800


#linux mint 15 std value
**.arp.cacheTimeout = 60s
 
# configure control and data plane interfaces separately
*.configurator.config = xmldoc("ipv4config.xml")
